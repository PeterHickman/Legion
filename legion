#!/usr/bin/env ruby
# frozen_string_literal: true

# require 'expect'
require 'open3'

class String
  ##
  # Normal colours
  ##
  def black
    colorize(30)
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def blue
    colorize(34)
  end

  def magenta
    colorize(35)
  end

  def cyan
    colorize(36)
  end

  def white
    colorize(37)
  end

  ##
  # Bright colours
  ##
  def bright_black
    colorize(90)
  end

  def bright_red
    colorize(91)
  end

  def bright_green
    colorize(92)
  end

  def bright_yellow
    colorize(93)
  end

  def bright_blue
    colorize(94)
  end

  def bright_magenta
    colorize(95)
  end

  def bright_cyan
    colorize(96)
  end

  def bright_white
    colorize(97)
  end

  ##
  # Normal background colours
  ##
  def bg_black
    colorize(40)
  end

  def bg_red
    colorize(41)
  end

  def bg_green
    colorize(42)
  end

  def bg_yellow
    colorize(43)
  end

  def bg_blue
    colorize(44)
  end

  def bg_magenta
    colorize(45)
  end

  def bg_cyan
    colorize(46)
  end

  def bg_white
    colorize(47)
  end

  ##
  # Bright background colours
  ##
  def bg_bright_black
    colorize(100)
  end

  def bg_bright_red
    colorize(101)
  end

  def bg_bright_green
    colorize(102)
  end

  def bg_bright_yellow
    colorize(103)
  end

  def bg_bright_blue
    colorize(104)
  end

  def bg_bright_magenta
    colorize(105)
  end

  def bg_bright_cyan
    colorize(106)
  end

  def bg_bright_white
    colorize(107)
  end

  private

  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end
end

class Legion
  def initialize(list)
    @script_files = []
    @options = {}
    @lines = []
    @dry_run = false

    list.each do |filename|
      if File.exist?(filename)
        @script_files << filename
      elsif filename == '--dry-run'
        @dry_run = true
      else
        dropdead "[#{filename}] is not a real file"
      end
    end

    Dir.mkdir('log') unless File.directory?('log')

    logfile_name = "log/legion.#{Time.now.strftime('%Y%m%d-%H%M')}.log"
    @logger = File.open(logfile_name, 'w')

    log '#', "Log file written to #{logfile_name}"
  end

  def process
    log '#', "Legion command line #{@script_files.join(' ')}"

    ##
    # Collect all the lines to execute
    ##
    @lines.clear

    @script_files.each do |script_file|
      process_file(script_file)
    end

    ##
    # Execute the lines
    ##
    @lines.each do |x|
      case x[:command]
      when 'CMD'
        do_cmd(x[:args])
      when 'COPY'
        do_copy(x[:args])
      when 'CONFIG'
        do_config(x[:args])
      when 'ECHO'
        do_echo(x[:args])
      when 'DEBUG'
        do_debug
      when 'HALT'
        dropdead "#{x[:file]} commits suicide at line #{x[:line]}"
      when 'INCLUDE'
        # Nothing to do in this pass
      else
        dropdead "Unknown command [#{x[:command]}] at line #{x[:line]} of #{x[:file]}"
      end
    end

    log '#', 'Done'
  end

  private

  def process_file(filename)
    @lines << {file: filename, line: 0, command: 'ECHO', args: "Reading commands from #{filename}"}

    line_number = 0

    File.open(filename, 'r').each do |line|
      line_number += 1

      next if line =~ /^\s*$/
      next if line =~ /^\s*\#/

      c, v = line.chomp.strip.split(/\s+/, 2)

      case c.upcase
      when 'CMD', 'COPY', 'CONFIG', 'ECHO', 'DEBUG', 'HALT'
        @lines << {file: filename, line: line_number, command: c.upcase, args: v}
      when 'INCLUDE'
        @lines << {file: filename, line: line_number, command: c.upcase, args: v}
        do_include(v)
      else
        dropdead "Unknown command [#{c}] at line #{line_number} of #{filename}"
      end
    end

    @lines << {file: filename, line: line_number, command: 'ECHO', args: "Completed #{filename}"}
  end

  def do_include(filename)
    if File.exist?(filename)
      process_file(filename)
    else
      dropdead "Include file #{filename} not found"
    end
  end

  def dropdead(message)
    log '!', message
    exit
  end

  def log(connection, message)
    text = "#{Time.now.strftime('%Y-%m-%d %H:%M:%S.%6N')} #{connection}"

    @logger.puts "#{text} #{message}" if @logger

    message = case connection
              when ':'
                message.green
              when '>'
                message.blue
              when '!'
                message.red
              when '#'
                message.yellow
              when '?'
                message.magenta
              else
                message
              end

    puts "#{text} #{message}"
  end

  def check_options
    %w[host port username password].each do |k|
      next if @options.key?(k)

      dropdead "Missing key [#{k}]"
    end
  end

  def interpolate(text)
    line = text.dup

    while line.include?('{{')
      line =~ /({{([^}]+)}})/

      t = $1.to_s
      k = $2.downcase

      if @options.key?(k)
        line = line.gsub(t, @options[k])
      else
        dropdead "Unable to substitute #{t}, #{k} not set in [#{text}]"
      end
    end

    line
  end

  def do_cmd(command)
    command = interpolate(command)

    log '>', "CMD #{command}"

    check_options

    cmd = "ssh -p #{@options['port']} #{@options['username']}:#{@options['password']}@#{@options['host']} #{command}"

    if @dry_run
      log ':', "Pretend: #{cmd}"
    else
      Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
        while line = stdout.gets
          log '<', line
        end
        while line = stderr.gets
          log '!', line.chomp
        end
      end
    end
  end

  def do_copy(text)
    text = interpolate(text)

    from, to = text.split(/\s+/)

    log '>', "COPY [#{from}] to [#{to}]"

    check_options

    cmd = "scp -P #{@options['port']} #{from} #{@options['username']}@#{@options['host']}:#{to}"

    if @dry_run
      log ':', "Pretend: #{cmd}"
    else
      Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
        while line = stdout.gets
          log '<', line
        end
      end
    end
  end

  def do_config(text)
    k, v = text.split(/\s+/, 2)
    k = k.downcase

    if @options.key?(k)
      if @options[k] == v
        log '#', "Setting [#{k}] to [#{v}] (no change)"
      else
        log '?', "Re-setting [#{k}] to [#{v}] from [#{@options[k]}]"
      end
    else
      log '#', "Setting [#{k}] to [#{v}]"
    end

    @options[k] = v
  end

  def do_echo(text)
    log '#', interpolate(text)
  end

  def do_debug
    log '#', 'START CONFIG'
    @options.each do |k, v|
      log '#', "[#{k}] = [#{v}]"
    end
  end
end

l = Legion.new(ARGV)
l.process
